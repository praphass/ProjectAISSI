import streamlit as st
import pandas as pd
import joblib
import numpy as np
import openai
from typing import Optional

# --- 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ ---
st.set_page_config(page_title="Loan Approval Prediction", layout="wide")

# ‡∏î‡∏∂‡∏á API Key ‡∏à‡∏≤‡∏Å Secrets ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
openai.api_key = st.secrets["OPENAI_API_KEY"]

# ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
# model_options = [
#    "model_logistic_muticlass_credit_score_v2.pkl",
#   # "model_logistic_muticlass_nocredit_score_v2.pkl",
#    "model_randomforest_multiclass_credit_score_v2.pkl"
#   # "model_randomforest_muticlass_nocredit_score_v2.pkl"
#]

model_options = [
   # "C1M1_Logistic_Regression_Model.pkl",
   # "C1M2_Random_Forest_Model.pkl",
   # "C2M1_Logistic_Regression_Model.pkl",
   # "C2M2_Random_Forest_Model.pkl"
    "C2M2_Credit_score_with_Random_Forest_Model.pkl",
  #  "C2M1_Credit_score_with_Logistic_Regression_Model.pkl",
    "C1M2_No_credit_score_with_Random_Forest_Model.pkl",
  #  "C1M1_No_credit_score_with_Logistic_Regression_Model.pkl"
]

#selected_model_file = st.selectbox(
#    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:",
#    options=model_options
#)


# --- 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• ---
with st.sidebar:
    st.header("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    selected_model_file = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:",
        options=model_options
    )

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    st.markdown("---")  # ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢
    st.markdown(
        """
        <a href="https://gemini.google.com/share/d640dc922e14" target="_blank">
            <button style="background-color:#008CBA; color:white; border:none; padding: 10px 24px; text-align:center; display:block; margin: 10px 0; cursor: pointer; border-radius: 8px;">
                ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Machine Learning üìñ
            </button>
        </a>
        <a href="https://g.co/gemini/share/793a2613a32c" target="_blank">
        <button style="background-color:#4CAF50; color:white; border:none; padding: 10px 24px; text-align:center; display:block; margin: 10px 0; cursor: pointer; border-radius: 8px;">
            ML pipeline diagram üìñ
        </button>
    </a>
        """,
        unsafe_allow_html=True
    )


# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
#st.info("""
#**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:**
#- C1M1: No credit score with Logistic Regression Model
#- C1M2: No credit score with Random Forest Model
#- C2M1: Credit score with Logistic Regression Model
#- C2M2: Credit score with Random Forest Model
#""")
# st.info(""" **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** """)
# st.info("C2M2: Credit score with Random Forest Model", icon="üëç")
# st.info("C2M1: Credit score with Logistic Regression Model")
# st.info("C1M2: No credit score with Random Forest Model", icon="‚ù§")
# st.info("C1M1: No credit score with Logistic Regression Model", icon="üëé")

st.markdown("""
<style>
.stAlert {
    border-left: 5px solid;
}
.red-icon {
    color: red;
}
.blue-icon {
    color: blue;
}
.pink-icon {
    color: #ff69b4; /* ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */
}
</style>
""", unsafe_allow_html=True)

st.markdown("""
<div class="stAlert">
   **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:**
</div>
<div class="stAlert">
    C2M2: Credit score with Random Forest Model <span class="red-icon">üëç</span> 
</div>
<div class="stAlert">
   C1M2: No credit score with Random Forest Model <span class="blue-icon">‚ù§</span> 
</div>
""", unsafe_allow_html=True)


def call_gpt(prompt: str) -> Optional[str]:
    """
    ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô GPT-3.5 ‡∏ú‡πà‡∏≤‡∏ô OpenAI API ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á prompt ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
    ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    """
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.6,
            max_tokens=750,
        )
        #return response.choices[0].message.content
        return response.choices[0].message.content.strip()

    except openai.error.AuthenticationError as e:
        print("‚ùå Authentication Error: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n", e)
    except openai.error.RateLimitError as e:
        print("‚ùå Rate Limit Error: ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô quota ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì.\n", e)
    except openai.error.OpenAIError as e:
        print("‚ùå OpenAI API Error:", e)
    except Exception as e:
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô:", e)

    return None  # ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None


def preprocess_data(input_df: pd.DataFrame, expected_features: list) -> pd.DataFrame:
    """
    Transforms raw input data to match the expected format for the model.

    This function performs One-Hot Encoding and aligns the columns to ensure
    the input DataFrame has the same features and order as the data used
    to train the model.

    Args:
        input_df (pd.DataFrame): The raw DataFrame with user-provided data.
        expected_features (list): A list of feature names the model expects.

    Returns:
        pd.DataFrame: The preprocessed DataFrame ready for prediction.
    """
    # Define categorical columns to encode
    cat_cols_to_encode = [
        'Gender', 'Occupation', 'Education', 'Marital_Status', 'Region',
        'Certificate', 'loan_purpose', 'home_ownership'
    ]

    # Perform One-Hot Encoding
    input_df_encoded = pd.get_dummies(input_df, columns=cat_cols_to_encode, drop_first=True)

    # Add any missing columns (from the expected list) and fill with zeros
    missing_cols = set(expected_features) - set(input_df_encoded.columns)
    for c in missing_cols:
        input_df_encoded[c] = 0

    # Remove any extra columns that are not in the expected list
    extra_cols = set(input_df_encoded.columns) - set(expected_features)
    if extra_cols:
        input_df_encoded.drop(columns=extra_cols, inplace=True)

    # Reorder the columns to match the expected order
    input_df_encoded = input_df_encoded[expected_features]

    return input_df_encoded

def generate_credit_reason(
    Monthly_Income,
    Loan_Amount,
    loan_purpose,
    home_ownership,
    dependents,
    job_completion_rate,
    on_time_rate,
    avg_response_time_mins,
    customer_rating_avg,
    job_acceptance_rate,
    job_cancellation_count,
    weekly_active_days,
    membership_duration_months,
    simulated_credit_score,
    work_consistency_index,
    inactive_days_last_30,
    rejected_jobs_last_30,
    Loan_Status_3Class=None
):
    """
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏î‡πâ‡∏ß‡∏¢ GPT ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏

    Parameters: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ column)
    Returns:
        str: ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏à‡∏≤‡∏Å GPT
    """

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input ‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ
    required_fields = [Monthly_Income, Loan_Amount, loan_purpose, home_ownership,
                       dependents, job_completion_rate, on_time_rate, avg_response_time_mins,
                       customer_rating_avg, job_acceptance_rate, job_cancellation_count,
                       weekly_active_days, membership_duration_months,
                       simulated_credit_score, work_consistency_index,
                       inactive_days_last_30, rejected_jobs_last_30]

    if any(x is None for x in required_fields):
        return "‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á"

    # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ---
    prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏≠‡∏ß‡∏∏‡πÇ‡∏™‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï:

- ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {Monthly_Income:,} ‡∏ö‡∏≤‡∏ó
- ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≠‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠: {Loan_Amount:,} ‡∏ö‡∏≤‡∏ó
- ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ: {loan_purpose}
- ‡∏Å‡∏≤‡∏£‡∏ñ‡∏∑‡∏≠‡∏Ñ‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢: {home_ownership}
- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏û‡∏∂‡πà‡∏á‡∏û‡∏¥‡∏á: {dependents} ‡∏Ñ‡∏ô

- ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {job_completion_rate:.1f}%
- ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {on_time_rate:.1f}%
- ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_response_time_mins:.1f} ‡∏ô‡∏≤‡∏ó‡∏µ
- ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {customer_rating_avg:.2f}
- ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô: {job_acceptance_rate:.1f}%
- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {job_cancellation_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå: {weekly_active_days} ‡∏ß‡∏±‡∏ô
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {work_consistency_index:.2f}

- ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: {membership_duration_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤: {inactive_days_last_30} ‡∏ß‡∏±‡∏ô
- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô: {rejected_jobs_last_30} ‡∏á‡∏≤‡∏ô
- ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ (‡∏à‡∏≥‡∏•‡∏≠‡∏á): {simulated_credit_score}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ô‡∏µ‡πâ
‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î:
- ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á (‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å)
- ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á (‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏ö)
- ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
- ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)

‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£ "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"
‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ

"""

    if Loan_Status_3Class:
        prompt += f"\n\n(‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ '{Loan_Status_3Class}')"

    try:
        result = call_gpt(prompt)
        # result = call_openthaigpt(prompt)
        if result is not None:
            print(result)
        else:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å GPT ‡πÑ‡∏î‡πâ")
        return result

    except Exception as e:
        print("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", e)
        return f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ: {e}"


# --- Helper Function for the new report ---
def get_credit_grade(score):
    """Maps a credit score to a grade based on NCB criteria."""
    if 753 <= score <= 900:
        return "AA", "‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"
    elif 725 <= score <= 752:
        return "BB", "‡∏î‡∏µ"
    elif 699 <= score <= 724:
        return "CC", "‡∏î‡∏µ‡∏û‡∏≠‡πÉ‡∏ä‡πâ"
    elif 681 <= score <= 698:
        return "DD", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
    elif 666 <= score <= 680:
        return "EE", "‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
    elif 616 <= score <= 665:
        return "FF", "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
    elif 300 <= score <= 615:
        return "HH", "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á"
    else:
        return "N/A", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ"


def get_credit_reasons(score, data):
    """Generates plausible and consistent reasons based on the score and input data."""
    reasons = []

    # --- Logic for HIGH credit score ---
    if score >= 680:
        # Check for positive factors
        if data['membership_duration_months'] > 120:
            reasons.append("‚úÖ ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ô‡∏≤‡∏ô")
        if data['job_completion_rate'] > 95.0:
            reasons.append("‚úÖ ‡∏°‡∏µ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á")
        if data['customer_rating_avg'] > 4.5:
            reasons.append("‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°")
        if data['work_consistency_index'] > 0.9:
            reasons.append("‚úÖ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á")

        # Default positive reason if no specific positive factors are met
        if not reasons:
            reasons.append("‚úÖ ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ")

    # --- Logic for LOW credit score ---
    else:  # score < 680
        # Check for negative factors
        if data['Loan_Amount'] > (data['Monthly_Income'] * 5) and data['Monthly_Income'] > 0:
            reasons.append("‚ö†Ô∏è ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏¢‡∏≠‡∏î‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á")
        if data['Work_Experience'] < 2:
            reasons.append("‚ö†Ô∏è ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢")
        if data['job_cancellation_count'] > 10:
            reasons.append("‚ö†Ô∏è ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        if data['inactive_days_last_30'] > 15:
            reasons.append("‚ö†Ô∏è ‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á")
        if data['rejected_jobs_last_30'] > 5:
            reasons.append("‚ö†Ô∏è ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

        # Default negative reason if no specific negative factors are met
        if not reasons:
            reasons.append("‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")

    return reasons[:4]  # Return max 4 reasons

# --- 1. ‡πÇ‡∏´‡∏•‡∏î Model ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î Mapping ---
# ‡πÉ‡∏ä‡πâ try-except ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏≤‡∏Å‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
try:
    #model = joblib.load("loan_model_extended_muticlass_randomforest_credit_score.pkl")
    #model = joblib.load("loan_model_muticlass_randomforest_credit_score_5aug2025.pkl")
    model = joblib.load(selected_model_file)
    st.success(f"‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• '{selected_model_file}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‚ú®")

except FileNotFoundError:
    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (loan_model...pkl). ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'models'")
    st.stop()  # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏î‡∏•



# Manual mapping ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
education_map = {'Vocational': 0, 'Secondary': 1, 'Primary': 2, 'None': 3}
loan_purpose_map = {'business': 0, 'personal': 1}
home_ownership_map = {'own': 0, 'rent': 1}
certificate_map = {'Yes': 0, 'No': 1}
gender_map = {'Male': 0, 'Female': 1}
marital_status_map = {'Single': 0, 'Married': 1, 'Divorced': 2}
region_map = {'North': 0, 'Central': 1, 'South': 2, 'East': 3, 'West': 4}
occupation_map = {'Private': 0, 'Government': 1, 'Freelancer': 2, 'Unemployed': 3}


st.title("üéØ AI-Powered Credit Rating Service")

# --- 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Form ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ---
with st.form("loan_application_form"):
    st.subheader("üìã Credit Rating Service")

    # === ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ ===
   # col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
   # col1.write("Feature Type")
   # col2.write("Feature (English)")
   # col3.write("‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢")
   # worker_id = col4.text_input("worker_id_input", label_visibility="collapsed")

    col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
    col1.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£")
    # col2.write("Gender")
    col3.write("‡πÄ‡∏û‡∏®")
    Gender = col4.selectbox("gender_input", list(gender_map.keys()), label_visibility="collapsed")

    col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
    col1.write("")
   # col2.write("Age")
    col3.write("‡∏≠‡∏≤‡∏¢‡∏∏")
    Age = col4.slider("age_input", 18, 70, 30, label_visibility="collapsed")

    col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
    col1.write("")
   # col2.write("Marital Status")
    col3.write("‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏™‡∏°‡∏£‡∏™")
    Marital_Status = col4.selectbox("marital_status_input", list(marital_status_map.keys()),
                                    label_visibility="collapsed")

    col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
    col1.write("")
   # col2.write("Education")
    col3.write("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤")
    Education = col4.selectbox("education_input", list(education_map.keys()), label_visibility="collapsed")

    col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
    col1.write("")
   # col2.write("Occupation")
    col3.write("‡∏≠‡∏≤‡∏ä‡∏µ‡∏û")
    Occupation = col4.selectbox("occupation_input", list(occupation_map.keys()), label_visibility="collapsed")

    col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
    col1.write("")
  #  col2.write("Work Experience")
    col3.write("‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡∏õ‡∏µ)")
    Work_Experience = col4.slider("work_experience_input", 0, 40, 5, label_visibility="collapsed")

    col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
    col1.write(" ")
   # col2.write("Certificate")
    col3.write("‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á")
    Certificate = col4.selectbox("certificate_input", list(certificate_map.keys()), label_visibility="collapsed")

    col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
    col1.write("")
   # col2.write("Region")
    col3.write("‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ")
    Region = col4.selectbox("region_input", list(region_map.keys()), label_visibility="collapsed")

    # === ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠ ===
    col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
    col1.write(" ")
  #  col2.write("Monthly Income")
    col3.write("‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    Monthly_Income = col4.number_input("monthly_income_input", min_value=0.0, value=25000.0,
                                       label_visibility="collapsed")

    col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
    col1.write("")
   # col2.write("Home Ownership")
    col3.write("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢")
    home_ownership = col4.selectbox("home_ownership_input", list(home_ownership_map.keys()),
                                    label_visibility="collapsed")

    col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
    col1.write("")
   # col2.write("Dependents")
    col3.write("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏∞")
    dependents = col4.slider("dependents_input", 0, 10, 1, label_visibility="collapsed")

    col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
    col1.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
   # col2.write("Loan Amount")
    col3.write("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏Å‡∏π‡πâ")
    Loan_Amount = col4.number_input("loan_amount_input", min_value=0.0, value=10000.0, label_visibility="collapsed")

    col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
    col1.write("")
   # col2.write("Loan Purpose")
    col3.write("‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ")
    loan_purpose = col4.selectbox("loan_purpose_input", list(loan_purpose_map.keys()), label_visibility="collapsed")

    col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
    col1.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ö‡∏π‡πÇ‡∏£")
  #  col2.write("simulated credit score")
    col3.write("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï")
    simulated_credit_score = col4.slider("simulated_credit_score_input", 400, 900, 600, label_visibility="collapsed")

  #  st.divider()
  #  st.subheader("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (Performance Metrics)")

    # === Performance/Activity Metrics ===
    metrics_values = {}
  #  metrics_config = [
  #      ("job_completion_rate", "Job Completion Rate (%)", "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏á‡∏≤‡∏ô", 0.0, 100.0, 85.0),
  #      ("on_time_rate", "On Time Rate (%)", "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤", 0.0, 100.0, 90.0),
  #      ("avg_response_time_mins", "Avg. Response Time (mins)", "‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ô‡∏≤‡∏ó‡∏µ)", 0.0, 120.0, 10.0),
  #      ("customer_rating_avg", "Customer Rating Avg.", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", 0.0, 5.0, 4.2),
  #      ("job_acceptance_rate", "Job Acceptance Rate (%)", "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô", 0.0, 100.0, 80.0),
  #      ("job_cancellation_count", "Job Cancellation Count", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô", 0, 100, 2),
  #      ("weekly_active_days", "Weekly Active Days", "‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", 0, 7, 5),
  #      ("membership_duration_months", "Membership Duration (months)", "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)", 0, 240, 24),
  #     # ("simulated_credit_score", "Simulated Credit Score", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏à‡∏≥‡∏•‡∏≠‡∏á", 300, 850, 650),
  #      ("work_consistency_index", "Work Consistency Index", "‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠", 0.0, 1.0, 0.75),
  #      ("inactive_days_last_30", "Inactive Days (last 30)", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô", 0, 30, 3),
  #      ("rejected_jobs_last_30", "Rejected Jobs (last 30)", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô", 0, 30, 1),
  #  ]

    metrics_config = [
         ("job_completion_rate", " ", "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏á‡∏≤‡∏ô", 0.0, 100.0, 85.0),
         ("on_time_rate", " ", "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤", 0.0, 100.0, 90.0),
         ("avg_response_time_mins", " ", "‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ô‡∏≤‡∏ó‡∏µ)", 0.0, 120.0, 10.0),
         ("customer_rating_avg", " ", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", 0.0, 5.0, 4.2),
         ("job_acceptance_rate", " ", "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô", 0.0, 100.0, 80.0),
         ("job_cancellation_count", " ", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô", 0, 100, 2),
         ("weekly_active_days", " ", "‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", 0, 7, 5),
         ("membership_duration_months", " ", "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)", 0, 240, 24),
    #     # ("simulated_credit_score", "Simulated Credit Score", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏à‡∏≥‡∏•‡∏≠‡∏á", 300, 850, 650),
         ("work_consistency_index", " ", "‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠", 0.0, 1.0, 0.75),
         ("inactive_days_last_30", " ", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô", 0, 30, 3),
         ("rejected_jobs_last_30", " ", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô", 0, 30, 1),
      ]

    # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Header ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏ó‡∏≥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ---
   # col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
   # col1.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
   # col2.write("**Metric (EN)**")
   # col3.write("**‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å (TH)**")

    first_time = True

    for var_name, label_en, label_th, min_val, max_val, default in metrics_config:
        col1, col2, col3, col4 = st.columns([2, 2, 2, 4])
        if first_time:
            col1.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
            first_time = False
        else:
            col1.write("")  # ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∞‡πÑ‡∏£

        col2.write(label_en)
        col3.write(label_th)
        if isinstance(default, float):
            metrics_values[var_name] = col4.slider(var_name, float(min_val), float(max_val), float(default),
                                                   label_visibility="collapsed")
        else:
            metrics_values[var_name] = col4.slider(var_name, int(min_val), int(max_val), int(default), label_visibility="collapsed")

        # --- CSS for the submit button ---
        st.markdown("""
        <style>
        div.stButton > button {
            background-color: #FF8C00; /* Orange color */
            color: white;
            width: 100%;
            border-radius: 5px;
            border: none;
        }
        </style>
        """, unsafe_allow_html=True)

    colss = st.columns([6, 1])
    with colss[1]:
         submitted = st.form_submit_button("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠")

# --- 4. ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏î Submit ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ---
if submitted:
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Dictionary ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
    #Nocredit_score
    if "C1M1" in selected_model_file or "C1M2" in selected_model_file:
        data_to_predict = {
            "Gender": gender_map[Gender],
            "Age": Age,
            "Occupation": occupation_map[Occupation],
            "Education": education_map[Education],
            "Marital_Status": marital_status_map[Marital_Status],
            "Work_Experience": Work_Experience,
            "Certificate": certificate_map[Certificate],
            "Region": region_map[Region],
            "Monthly_Income": Monthly_Income,
            "Loan_Amount": Loan_Amount,
            "loan_purpose": loan_purpose_map[loan_purpose],
            "home_ownership": home_ownership_map[home_ownership],
            "dependents": dependents,
            "job_completion_rate": metrics_values["job_completion_rate"],
            "on_time_rate": metrics_values["on_time_rate"],
            "avg_response_time_mins": metrics_values["avg_response_time_mins"],
            "customer_rating_avg": metrics_values["customer_rating_avg"],
            "job_acceptance_rate": metrics_values["job_acceptance_rate"],
            "job_cancellation_count": metrics_values["job_cancellation_count"],
            "weekly_active_days": metrics_values["weekly_active_days"],
            "membership_duration_months": metrics_values["membership_duration_months"],
           # "simulated_credit_score": simulated_credit_score,
            "work_consistency_index": metrics_values["work_consistency_index"],
            "inactive_days_last_30": metrics_values["inactive_days_last_30"],
            "rejected_jobs_last_30": metrics_values["rejected_jobs_last_30"]
           # **metrics_values  # ‡∏ô‡∏≥‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å sliders ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô
        }

    #Credit_score
    elif "C2M1" in selected_model_file or "C2M2" in selected_model_file:

        data_to_predict = {
            "Gender": gender_map[Gender],
            "Age": Age,
            "Occupation": occupation_map[Occupation],
            "Education": education_map[Education],
            "Marital_Status": marital_status_map[Marital_Status],
            "Work_Experience": Work_Experience,
            "Certificate": certificate_map[Certificate],
            "Region": region_map[Region],
            "Monthly_Income": Monthly_Income,
            "Loan_Amount": Loan_Amount,
            "loan_purpose": loan_purpose_map[loan_purpose],
            "home_ownership": home_ownership_map[home_ownership],
            "dependents": dependents,
            "job_completion_rate": metrics_values["job_completion_rate"],
            "on_time_rate": metrics_values["on_time_rate"],
            "avg_response_time_mins": metrics_values["avg_response_time_mins"],
            "customer_rating_avg": metrics_values["customer_rating_avg"],
            "job_acceptance_rate": metrics_values["job_acceptance_rate"],
            "job_cancellation_count": metrics_values["job_cancellation_count"],
            "weekly_active_days": metrics_values["weekly_active_days"],
            "membership_duration_months": metrics_values["membership_duration_months"],
            "simulated_credit_score": simulated_credit_score,
            "work_consistency_index": metrics_values["work_consistency_index"],
            "inactive_days_last_30": metrics_values["inactive_days_last_30"],
            "rejected_jobs_last_30": metrics_values["rejected_jobs_last_30"]
            # **metrics_values  # ‡∏ô‡∏≥‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å sliders ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô
        }
    else:
        # --- Handle unknown models ---
        st.warning("no data found")

    input_df = pd.DataFrame([data_to_predict])

    st.write("---")
    st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (Prediction Result)")

    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
    try:
        #prediction = model.predict(input_df)[0]
        #prediction_proba = model.predict_proba(input_df)[0]
        # ======================  For Logistic
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å


        # Check the selected model file
        if "C2M1" in selected_model_file or "C1M1" in selected_model_file:

            if "C2M1" in selected_model_file: #C2M1_Credit_score_with_Logistic_Regression_Model
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                # 4.2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î features ‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
                expected_features = [
                    'Age', 'Work_Experience', 'Monthly_Income', 'Loan_Amount', 'dependents',
                    'job_completion_rate', 'on_time_rate', 'avg_response_time_mins',
                    'customer_rating_avg', 'job_acceptance_rate', 'job_cancellation_count',
                    'weekly_active_days', 'membership_duration_months', 'simulated_credit_score',
                    'work_consistency_index', 'inactive_days_last_30', 'rejected_jobs_last_30',
                    'Gender_Male', 'Occupation_Freelancer', 'Occupation_Government',
                    'Occupation_Unemployed', 'Education_Primary', 'Education_Secondary',
                    'Education_Vocational', 'Marital_Status_Married', 'Marital_Status_Single',
                    'Region_East', 'Region_North', 'Region_South'
                ]

            else: #C1M1_Nocredit_score_with_Logistic_Regression_Model
                expected_features = [
                    'Age', 'Work_Experience', 'Monthly_Income', 'Loan_Amount', 'dependents',
                    'job_completion_rate', 'on_time_rate', 'avg_response_time_mins',
                    'customer_rating_avg', 'job_acceptance_rate', 'job_cancellation_count',
                    'weekly_active_days', 'membership_duration_months', # 'simulated_credit_score',
                    'work_consistency_index', 'inactive_days_last_30', 'rejected_jobs_last_30',
                    'Gender_Male', 'Occupation_Freelancer', 'Occupation_Government',
                    'Occupation_Unemployed', 'Education_Primary', 'Education_Secondary',
                    'Education_Vocational', 'Marital_Status_Married', 'Marital_Status_Single',
                    'Region_East', 'Region_North', 'Region_South'
                ]



            # 4.3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            input_df_processed = preprocess_data(input_df, expected_features)
            # =============== # For Logistic
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Logistic Regression ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
            prediction = model.predict(input_df_processed)[0]
            prediction_proba = model.predict_proba(input_df_processed)[0]

        elif "C2M2" in selected_model_file or "C1M2" in selected_model_file:

            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÄ‡∏ä‡πà‡∏ô Random Forest) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
            prediction = model.predict(input_df)[0]
            prediction_proba = model.predict_proba(input_df)[0]

        else:
            # --- Handle unknown models ---
            st.warning("Selected model is not a recognized Logistic Regression or Random Forest model.")
            prediction = None
            prediction_proba = None

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    ##    st.success(f"**‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {prediction}**")

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
    ##    proba_df = pd.DataFrame({
    ##        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (Status)': model.classes_,
    ##        '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (Probability)': prediction_proba
    ##    })
    ##    st.write("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô:")
    ##    st.dataframe(proba_df.style.format({'‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (Probability)': '{:.2%}'}))

    ## except Exception as e:
    ##    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {e}")
        # --- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà ---
        st.markdown("""
        <style>
        .report-container {
            border: 2px solid #1E90FF;
            border-radius: 10px;
            padding: 20px;
            background-color: #F0F8FF;
        }
        .report-header {
            color: #1E90FF;
            text-align: center;
            margin-bottom: 20px;
        }
        </style>
        """, unsafe_allow_html=True)

        with st.container():
            st.markdown('<div class="report-container">', unsafe_allow_html=True)
            st.markdown('<h2 class="report-header">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</h2>', unsafe_allow_html=True)

            # --- NEW LAYOUT PART 1: Top metrics ---
            score = simulated_credit_score
            grade, grade_desc = get_credit_grade(score)

            res_col1, res_col2, res_col3 = st.columns(3)
            with res_col1:
                #st.metric(label=f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï (‡πÄ‡∏Å‡∏£‡∏î: {grade})", value=score)
                st.markdown(
                    f"""
                        <div style="text-align: center; border: 1px solid #ddd; padding: 15px; border-radius: 10px;">
                            <p style="font-size: 1.2em; color: #555; margin-bottom: 5px;">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï (‡πÄ‡∏Å‡∏£‡∏î: {grade})</p>
                            <h3 style="font-size: 2em; color: #333; margin-top: 0;">{score}</h3>
                        </div>
                        """,
                    unsafe_allow_html=True
                )



            with res_col2:
                status_map = {0: "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á (‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)", 1: "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥ (‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)", 2: "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"}
                status_color = {0: "red", 1: "green", 2: "orange"}
                #status_map = {0: "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥ (‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)", 1: "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", 2: "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á (‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)"}
                #status_color = {0: "green", 1: "orange", 2: "red"}
                #st.markdown("##### **‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢ AI**")
                #st.markdown(
                #    f"<h4 style='color:{status_color.get(prediction, 'black')};'>{status_map.get(prediction, 'N/A')}</h4>",
                #    unsafe_allow_html=True)
                # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Markdown ‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö res_col1
                st.markdown(
                    f"""
                        <div style="text-align: center; border: 1px solid #ddd; padding: 15px; border-radius: 10px;">
                            <p style="font-size: 1.2em; color: #555; margin-bottom: 5px;">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢ AI</p>
                            <h3 style="font-size: 2em; color: {status_color.get(prediction, 'black')}; margin-top: 0;">{status_map.get(prediction, 'N/A')}</h3>
                        </div>
                        """,
                    unsafe_allow_html=True
                )

            with res_col3:
                prob_default_index = np.where(model.classes_ == 0)[0][0]
                #prob_default_index = np.where(model.classes_ == 2)[0][0]
                prob_default = prediction_proba[prob_default_index]
               #st.metric(label="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞", value=f"{prob_default:.2%}")

                # 2. ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤ probability ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏¢‡πÑ‡∏î‡πâ)
                confidence_score = prediction_proba.max()  # ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤ 0.7

                # --- ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà ---
                # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏¢‡πà‡∏≠‡∏¢‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô res_col3
                #col_prediction, col_confidence = st.columns(2)
                #col_confidence = st.columns(1)
                # 2. ‡πÅ‡∏™‡∏î‡∏á "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢" ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏¢‡πà‡∏≠‡∏¢‡πÅ‡∏£‡∏Å
                #with col_confidence:
               ##   st.metric(label="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Class", value=prediction)
                #  st.metric(label="‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢", value=f"{confidence_score:.2%}")

            # 3. ‡πÅ‡∏™‡∏î‡∏á "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô" ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
               ## with col_prediction:
               ## st.metric(label="‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢", value=f"{confidence_score:.2%}")

                # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ Markdown ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
                #st.markdown(f'<div style="text-align: center; border: 1px solid #ddd; padding: 15px; border-radius: 10px;">;">'
                #            f'<p style="font-size: 1.2em; font-weight: bold;">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢</p>'
                #            f'<p style="font-size: 2.5em; color: black;">{confidence_score:.2%}</p>'
                #            f'</div>',
                #            unsafe_allow_html=True)

                st.markdown(
                    f"""
                    <div style="text-align: center; border: 1px solid #ddd; padding: 15px; border-radius: 10px;">
                        <p style="font-size: 1.2em; color: #555; margin-bottom: 5px;">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢</p>
                        <h3 style="font-size: 2em; color: black; margin-top: 0;">{confidence_score:.2%}</h3>
                    </div>
                    """,
                    unsafe_allow_html=True
                )

            st.markdown("<br>", unsafe_allow_html=True)  # Add some space

            # --- NEW LAYOUT PART 2: Table on the left ---
            table_col1, table_col2 = st.columns([1, 1])
            with table_col1:
                st.markdown("##### **‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï**")
                score_table = {
                    "‡πÄ‡∏Å‡∏£‡∏î": ["AA", "BB", "CC", "DD", "EE", "FF", "HH"],
                    "‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô": ["753-900", "725-752", "699-724", "681-698", "666-680", "616-665", "300-615"]
                }
                score_df = pd.DataFrame(score_table)


                def highlight_grade(s):
                    return ['background-color: #1E90FF; color: white' if s.‡πÄ‡∏Å‡∏£‡∏î == grade else '' for i in s]


                st.dataframe(score_df.style.apply(highlight_grade, axis=1), use_container_width=True)

            with table_col2:
                # --- NEW REASON SECTION ---
                st.markdown("##### **‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï**")
                #reasons = get_credit_reasons(score, data_to_predict)

                # Check the selected model file check nocredit
                if "C1M1" in selected_model_file or "C1M2" in selected_model_file:

                    reasons = generate_credit_reason(
                        Monthly_Income=data_to_predict['Monthly_Income'],
                        Loan_Amount=data_to_predict['Loan_Amount'],
                        loan_purpose=data_to_predict['loan_purpose'],
                        home_ownership=data_to_predict['home_ownership'],
                        dependents=data_to_predict['dependents'],
                        job_completion_rate=data_to_predict['job_completion_rate'],
                        on_time_rate=data_to_predict['on_time_rate'],
                        avg_response_time_mins=data_to_predict['avg_response_time_mins'],
                        customer_rating_avg=data_to_predict['customer_rating_avg'],
                        job_acceptance_rate=data_to_predict['job_acceptance_rate'],
                        job_cancellation_count=data_to_predict['job_cancellation_count'],
                        weekly_active_days=data_to_predict['weekly_active_days'],
                        membership_duration_months=data_to_predict['membership_duration_months'],
                        simulated_credit_score=simulated_credit_score, #data_to_predict['simulated_credit_score'],
                        work_consistency_index=data_to_predict['work_consistency_index'],
                        inactive_days_last_30=data_to_predict['inactive_days_last_30'],
                        rejected_jobs_last_30=data_to_predict['rejected_jobs_last_30'],
                        Loan_Status_3Class=status_map.get(prediction, 'N/A')
                    )

                elif "C2M1" in selected_model_file or "C2M2" in selected_model_file:  # check credit_score

                    reasons = generate_credit_reason(
                        Monthly_Income=data_to_predict['Monthly_Income'],
                        Loan_Amount=data_to_predict['Loan_Amount'],
                        loan_purpose=data_to_predict['loan_purpose'],
                        home_ownership=data_to_predict['home_ownership'],
                        dependents=data_to_predict['dependents'],
                        job_completion_rate=data_to_predict['job_completion_rate'],
                        on_time_rate=data_to_predict['on_time_rate'],
                        avg_response_time_mins=data_to_predict['avg_response_time_mins'],
                        customer_rating_avg=data_to_predict['customer_rating_avg'],
                        job_acceptance_rate=data_to_predict['job_acceptance_rate'],
                        job_cancellation_count=data_to_predict['job_cancellation_count'],
                        weekly_active_days=data_to_predict['weekly_active_days'],
                        membership_duration_months=data_to_predict['membership_duration_months'],
                        simulated_credit_score=data_to_predict['simulated_credit_score'],
                        work_consistency_index=data_to_predict['work_consistency_index'],
                        inactive_days_last_30=data_to_predict['inactive_days_last_30'],
                        rejected_jobs_last_30=data_to_predict['rejected_jobs_last_30'],
                        Loan_Status_3Class=status_map.get(prediction, 'N/A')
                    )



                st.markdown('<div class="reason-box">', unsafe_allow_html=True)
                #for reason in reasons:
                #    st.write(reason)
                st.write(reasons)
                st.markdown('</div>', unsafe_allow_html=True)

            #with table_col3:
            #    st.write("")  # Empty column for spacing

            st.markdown("---")
            st.info("**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            st.markdown('</div>', unsafe_allow_html=True)

    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {e}")

# --- Footer code here ---
st.markdown(
    """
    <style>
    .footer {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        background-color: #f0f2f6; /* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô */
        color: black; /* ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥ */
        text-align: center;
        padding: 10px;
        font-size: 14px;
        border-top: 1px solid #e6e6e6; /* ‡∏Ç‡∏≠‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô */
    }
    </style>
    <div class="footer">
        <p>School of IT Project AI Developer by 2PS team. @2025</p>
    </div>
    """,
    unsafe_allow_html=True
)